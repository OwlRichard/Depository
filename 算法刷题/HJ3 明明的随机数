明明生成了N个1到500之间的随机整数。请你删去其中重复的数字，即相同的数字只保留一个，把其余相同的数去掉，然后再把这些数从小到大排序，按照排好的顺序输出。

数据范围： 
 
1≤n≤1000  ，输入的数字大小满足 

 
1≤val≤500 
输入描述：
第一行先输入随机整数的个数 N 。 接下来的 N 行每行输入一个整数，代表明明生成的随机数。 具体格式可以参考下面的"示例"。
输出描述：
输出多行，表示输入数据处理后的结果

输入：
3
2
2
1

输出：
1
2

说明：
输入解释：
第一个数字是3，也即这个小样例的N=3，说明用计算机生成了3个1到500之间的随机整数，接下来每行一个随机数字，共3行，也即这3个随机数字为：
2
2
1
所以样例的输出为：
1
2    



const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
const inputData = [];
rl.on("line", (line) => {
    inputData.push(line);
});
rl.on("close", () => {
    const arr = inputData.splice(1);
    const newArr = [...new Set(arr)];
    newArr.sort((a, b) => a - b);
    newArr.forEach((item) => {
        console.log(Number(item));
    });
});


---
方法2
const rl = require("readline").createInterface({ input: process.stdin });
var iter = rl[Symbol.asyncIterator]();
const readline = async () => (await iter.next()).value;

const numsArr = [];
let outArr = [];

void (async function () {
    // Write your code here
    while ((line = await readline())) {
        numsArr.push(line);
        if ((numsArr.length - 1) === Number(numsArr[0])) {
            numsArr.shift();
            outArr = Array.from(new Set(numsArr)).sort((a, b) => {
                return a - b;
            });  // 注意接收新数组，不能用const
            outArr.forEach((v) => console.log(Number(v)));
            // 打印后是否需要清空 outArr？
        }
    }
})();


---
方法3
const readline = require("readline");

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
const nums = []; // 存待排序的所有数字
const clearNums = []; // 存去重后的数字
rl.on("line", function (line) {
    nums.push(line);
    if (nums.length - 1 === Number(nums[0])) {
        nums.shift(); // 去掉首位表示输入数据数量的数字
        nums.forEach((f) => {
            if (!clearNums.includes(f)) {
                clearNums.push(f); //  已存在的数字不重复添加
            }
        });
        // 对去重之后的数据进行排序
        clearNums.sort((a, b) => {
            return a - b;
        });
        clearNums.forEach((f) => console.log(f));
    }
});

